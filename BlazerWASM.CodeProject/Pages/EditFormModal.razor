@using System.ComponentModel.DataAnnotations

<style>
	h5 {
		padding:5px;
	}

	div.input-group {
		margin-top:5px;
	}
	div.list-group-item {
		margin:5px;
		border:solid,thin;
		border-color:black;
		margin-bottom:10px;
	}
</style>

@* <h2>Task List</h2> *@
<h5>@TaskAdded</h5>

<EditForm Model="tasks" OnValidSubmit="ValidSubmit" OnInvalidSubmit="InvalidSubmit">
	<DataAnnotationsValidator/>

	<label for="task">
		Task: &nbsp; <InputTextArea id="task" @bind-Value="tasks.TaskName" style="padding:5px;width:450px;height:150px;vertical-align:top;"></InputTextArea>
	</label>
	<ValidationMessage For="@( () => tasks.TaskName )" />
	<br/>

	<div class="input-group">
		<label for="numofitems">
			Number of Items: <InputNumber id="numofitems" @bind-Value="tasks.NumberofItems" style="width:50px;"></InputNumber>
		</label>
		<ValidationMessage For="@( () => tasks.NumberofItems )" />
	</div>
	<br />

	<label>
		Priority: &nbsp;
		<InputRadioGroup id="priority" @bind-Value="tasks.Priority" style="padding:5px;">
			@foreach (bool choice in yesorno)
			{
				<label>
					@choice <InputRadio Value="choice" /> &nbsp;
				</label>

			}
		</InputRadioGroup>
	</label>	
	
	<p>
		<input type="submit" value="submit" class="btn btn-outline-success" />
	</p>	
	
	@foreach (ValidTask listitem in validlist)
	{
		<span>#: @listitem.validnumber</span>
		<div class="list-group-item">
			Task: @listitem.tname
			<div class="list-group-item-primary">
				<label>
					Priority: @listitem.p
				</label>

			</div>
			@if (listitem.numitems > 0)
			{
				<div class="list-group-item-secondary">
					Number of Items: @listitem.numitems
				</div>
			}
			<button @onclick="DeletefromList">Delete</button>
		</div>					
	}
</EditForm>

@code {
	TaskList tasks = new TaskList();
	public string TaskAdded { get; set; }
	List<bool> yesorno = new List<bool>() { true, false };

	ValidTask submittedtask = new();
	List<ValidTask> validlist = new();		

	public class ValidTask
	{
		public string? tname { get; set; }

		public int numitems { get; set; }

		public bool p { get; set; }

		public int validnumber { get; set; }
	}

	public class TaskList
	{
		[Required(ErrorMessage = "Must make an entry!")]
		[StringLength(200, ErrorMessage = "Must be under 200 characters")]
		public string TaskName { get; set; }

		[Range(0, 999, ErrorMessage = "Must be positive and no more than 999")]
		public int NumberofItems { get; set; }

		[Required]
		public bool Priority { get; set; }

		public int listnumber { get; set; } = 0;
	}

	public async void ValidSubmit()
	{
		tasks.listnumber++;
		submittedtask = new ValidTask { tname = tasks.TaskName, numitems = tasks.NumberofItems, p = tasks.Priority, validnumber = tasks.listnumber};
		TaskAdded = "Task Added!";

		AddtoList(submittedtask);
	}

	public void InvalidSubmit()
	{
		TaskAdded = "Double check your entry";
	}

	public void AddtoList(ValidTask addingtask)
	{
		validlist.Add(addingtask);
	}	

	public void DeletefromList()
	{		
		
	}
}
